from diffusers import StableDiffusionPipeline, EulerDiscreteScheduler
import torch
from PIL.Image import Image
import pickle
import asyncio


class TextToImage:
    """
    The `TextToImage` class uses the Stable Diffusion model to generate an image based on a given prompt.
    """

    def __init__(self) -> None:
        self.device = "cuda" if torch.cuda.is_available() else "cpu"

        self.model_id = "stabilityai/stable-diffusion-2"

    def load(self):
        self.scheduler = EulerDiscreteScheduler.from_pretrained(
            self.model_id,
            subfolder="scheduler",
        )

        self.pipe = StableDiffusionPipeline.from_pretrained(
            self.model_id,
            scheduler=self.scheduler,
            torch_dtype=torch.float16,
        )

        self.pipe = self.pipe.to(self.device)

    def generate(self, prompt: str) -> Image:
        """
        The function "generate" takes a prompt as input and returns the first image generated by the "pipe"
        method.

        :param prompt: A string that represents the prompt for generating an image
        :type prompt: str
        :return: the first image generated by the OpenAI GPT-3 model.
        """

        image = self.pipe(prompt).images[0]
        torch.cuda.empty_cache()
        return image

    async def generate_with_async(self, prompt: str) -> Image:
        """
        The function "generate" takes a prompt as input and returns the first image generated by the "pipe"
        method.

        :param prompt: A string that represents the prompt for generating an image
        :type prompt: str
        :return: the first image generated by the OpenAI GPT-3 model.
        """

        # image = self.pipe(prompt).images[0]

        image = await asyncio.to_thread(self.pipe, prompt)

        image = image.images[0]

        torch.cuda.empty_cache()
        return image

    @staticmethod
    def to_pickle(obj):
        """
        The function `to_pickle` takes an object as input and returns a pickled representation of that
        object.

        :param obj: The `obj` parameter is the object that you want to convert to a pickle string
        :return: the object serialized as a pickle string.
        """
        return pickle.dumps(obj)
